package com.aconex.challenge.numbertowords.dictionary;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.aconex.challenge.numbertowords.dictionary.transformers.InputTransformer;
import com.aconex.challenge.numbertowords.dictionary.transformers.TransformerContainer;
import com.aconex.challenge.numbertowords.util.CollectionsUtil;

/**
 * Transforms a word to a number based on the number encoding used to be stored in the dictionary.<br>
 * This particular class handles supplementary characters, if there is any in the word, and expects the number encoding to support that.
 * 
 * Ex-&gt; For the below sample encoding, the word CALL and ME gets converted to 2255 and 63 respectively.<br>
 * A,B,C -&gt; 2	<br>
 * D,E,F -&gt; 3	<br>
 * G,H,I -&gt; 4 	<br>
 * J,K,L -&gt; 5 	<br>
 * M,N,O -&gt; 6 	<br>
 * P,Q,R,S -&gt; 7 <br>
 * T,U,V -&gt; 8	<br>
 * W,X,Y,Z -&gt; 9	<br><br>
	
 * @author Abhishek Agarwal
 *
 */
public class WordToNumberConverter implements InputTransformer<String> {
	private static final Logger LOGGER = Logger.getLogger(WordToNumberConverter.class.getName());
	Map<String,String> numbersEncodingMap;
	InputTransformer<String> parentTransformer;
	
	/**
	 * Creates an object with numbersEncodingMap which would be used to convert word to number
	 * @param numbersEncodingMap Number encoding map which is used to convert word to number
	 */
	
	public WordToNumberConverter(Map<String,String> numbersEncodingMap) {
		this.numbersEncodingMap = numbersEncodingMap;
	}

	/**
	 * Creates an object with numbersEncodingMap and parentTransformer which would be used to convert word to number
	 * @param parentTransformer Parent transformer if there is any massaging to be done before encoding is used to convert it to a number
	 * @param numbersEncodingMap Number encoding map which is used to convert word to number
	 */
	
	public WordToNumberConverter(InputTransformer<String> parentTransformer, Map<String,String> numbersEncodingMap) {
		this.parentTransformer = parentTransformer;
		this.numbersEncodingMap = numbersEncodingMap;
	}


	/**
	 * Transforms a given word,after applying transformation from a parent transformer, to a number based on the number encoding.<br>
	 * Furthermore, if there is a parent transformer applied, then the word generated by it is set as the input to argument numberTransformerContainer.<br>
	 * Since that is the word which would be stored in the dictionary. 
	 * For example if the parent transformer converts the word to uppercase then we would be storing the upper case word in the dictionary 
	 * @param wordToNumTransformerContainer Container which encapsulates the word to be transformed and is fed with the transformed number
	 */

	
	@Override
	public void transform(TransformerContainer<String> wordToNumTransformerContainer) {
		String wordToBeConverted = null;
		if(parentTransformer != null) {
			parentTransformer.transform(wordToNumTransformerContainer);
			if(CollectionsUtil.isNullOrEmpty(wordToNumTransformerContainer.getErrors())) {
				try {
					// The reason we need to flip this is that in dictionary we would store the transformed word of the previous transformations
					// Ex- Say the word is "Won't" , This would be transformed to "WONT" which is what would be added to the dictionary
					wordToNumTransformerContainer.flipInput();
				} catch (IllegalAccessException e) {
					//This is just to take care of the compilation. 
					//In this scenario it is guaranteed not to get this exception, since the input and transformed both are of type String
				}
				wordToBeConverted = wordToNumTransformerContainer.getInput();
			}
		}
		else {
			wordToBeConverted = wordToNumTransformerContainer.getInput();
		}
		
		if(wordToBeConverted != null) { // This check means there was no error returned from the parent transformer
			wordToNumTransformerContainer.setTransformed(convertWordToNumber(wordToBeConverted));
			if (LOGGER.isLoggable(Level.FINEST)) {
                LOGGER.log(Level.FINEST, "Dictionary word transformation: {0} ", wordToNumTransformerContainer);
			}
		}
		
	}
	

	/**
	 * Converts word to its number representation based on a given {link {@link #numbersEncodingMap Number Encoding}
	 * @param wordToBeConverted Dictionary word which is to be converted
	 * @return number representation of the word
	 */
	

	protected String convertWordToNumber(String wordToBeConverted) {
		StringBuilder numRepresentationOfWord = new StringBuilder();
		wordToBeConverted.codePoints().forEach((alphabetCodePoint) -> {
			String alphabet = new String(Character.toChars(alphabetCodePoint));
			String mappingDigit = numbersEncodingMap.get(alphabet);
			if (mappingDigit == null) {
				throw new NullPointerException();
			}
			numRepresentationOfWord.append(mappingDigit);
		});
		return numRepresentationOfWord.toString();
	}

}
